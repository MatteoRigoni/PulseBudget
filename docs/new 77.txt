────────────────────────────────────────────────────────
🔰 MODULO 0 – Scaffold & fondazioni
────────────────────────────────────────────────────────
• Crea progetto Flutter 4 “pulse_budget”.
• Cartelle: lib/ui/, /model/, /provider/, /services/, /theme/.
• Pubspec:
    flutter_riverpod
    flutter_animate
    intl
    rxdart
    fl_chart
    flex_color_picker
    fluentui_system_icons
    file_picker
    csv
    pdf_text
• Theme Material 3 light/dark + dynamic-color (fallback teal).
• main.dart → HomeShell con BottomNav vuoto.
👉  Mostra diff e attendi conferma.

────────────────────────────────────────────────────────
🏠 MODULO 1 – HomeScreen UI + provider locale
────────────────────────────────────────────────────────
1. `transactionsProvider` ⇒ StateNotifierProvider<List<Transaction>> (vuota).

2. HomeScreen
   • TopAppBar “Pulse Budget” + settings.
   • SegmentedButton “Mese / Anno” (state locale).
   • Row chips mesi/anni scroll orizz.
   • BalanceCard 180 dp:
       – testo “Saldo”, valore mock € 0,00 con colore byBalance(0)
       – sotto “+ Entrate €0 • – Uscite €0”
       – tap → SnackBar “Analysis non implementato”.
   • TonalButton “Carica dati Carta” → SnackBar placeholder.
   • Due FAB circolari: verde + / rosso – → SnackBar “Sheet non implementata”.

3. Helper `Color gradientByBalance(double)` → verde | grigio | rosso.
👉  Diff, conferma.

────────────────────────────────────────────────────────
➕ MODULO 2 – NewTransactionSheet (in-memory)
────────────────────────────────────────────────────────
• model/transaction.dart + enum PaymentType { bancomat, carta, contanti, altro }.
• BottomSheet 90 %: amount, date, description, paymentType pills, category dropdown (dummy).
• On Salva:
    – crea Transaction
    – add() a transactionsProvider
    – Navigator.pop()
    – animate saldo (scale 0.95→1).
• HomeScreen rilegge provider e aggiorna saldo/entrate/uscite + gradiente.
👉  Diff, conferma.

────────────────────────────────────────────────────────
🏷️ MODULO 3 – Categories CRUD (locale)
────────────────────────────────────────────────────────
• model/category.dart (id, name, iconCodePoint, colorHex, type income|expense).
• `categoriesProvider` StateNotifierProvider<List<Category>> (mock preset).
• CategoriesPage grid + FAB “＋ Categoria”.
• NewCategorySheet: IconPicker + ColorPicker + name.
• Dropdown categoria in NewTransactionSheet ora legge dal provider.
👉  Diff, conferma.

────────────────────────────────────────────────────────
🔁 MODULO 4 – Ricorrenti (locale)
────────────────────────────────────────────────────────
• model/recurring_rule.dart (amount, categoryId, paymentType, rrule).
• `recurringRulesProvider` StateNotifierProvider<List<RecurringRule>>.
• RecurringRulesPage + FAB “＋”.
• NewRecurringRuleSheet con frequenza mensile default.
• Scheduler locale: genera transazioni future, non tocca mesi passati.
👉  Diff, conferma.

────────────────────────────────────────────────────────
────────────────────────────────────────────────────────
📊 MODULO 5 – AnalysisSheet & CategoryDetail (locale)
────────────────────────────────────────────────────────
• AnalysisSheet: aggrega transactionsProvider per categoria nel periodo, ordina desc.
• CategoryDetailPage: pie-chart (fl_chart) + lista transazioni, bottoni edit/del (stub).
👉  Diff, conferma.

────────────────────────────────────────────────────────
🔍 MODULO 6 – Movimenti + search (locale)
────────────────────────────────────────────────────────
• MovementsScreen:
    AppBar SearchBar “Cerca movimenti…”.
    Debounce 300 ms (RxDart).
    Filtra transactionsProvider by description.contains(query.lower()).
    ListView TransactionCard (icona, descrizione highlight, amount ±, data, chip PaymentType).
    Ordine: amount desc poi date desc.
    Empty-state se lista vuota.
👉  Diff, conferma.

────────────────────────────────────────────────────────
📥 MODULO 7 – Import CSV/PDF (replace mirato, locale)
────────────────────────────────────────────────────────
• Overflow menu “Importa estratto…”.
• Dialog 1: scegli paymentType (Bancomat | Carta).
• FilePicker .csv/.pdf.
• Parser → List<ImportedTx>.
• Sostituisci SOLO le uscite del mese con quel paymentType:
      newState = old.where(notSameMonthOrType) + importedList;
• SnackBar “Import completato: n movimenti”.
👉  Diff, conferma.

────────────────────────────────────────────────────────
🧪 MODULO 8 – Test (locale)
────────────────────────────────────────────────────────
• Unit-test: gradientByBalance(), CsvParser, filtro search.
• Widget-test: 
    – Home gradiente per +/0/–
    – Movements search “tagliando”.
👉  Diff, conferma.

────────────────────────────────────────────────────────
☁️ MODULO 9 – Persistenza Firebase (fase finale)
────────────────────────────────────────────────────────
1. Aggiungi firebase_core & cloud_firestore; Spark setup; init in main().
2. Repository astratti + Firestore implementation:
      TransactionRepository, CategoryRepository, RecurringRuleRepository, BalanceRepository.
3. Migra providers a StreamProvider (watchByPeriod, watchAll…).
4. NewTransactionSheet / Import / Ricorrenti /Categorie / Patrimonio ora usano repo.add / batch.
5. Crea indice su `description_lowercase` per like-search.
6. Aggiorna MovementsScreen, CategoryScreen, PatrimonioSCreen a query Firestore.
7. Test con cloud_firestore_mocks.
👉  Diff, attendi conferma prima di applicare.



────────────────────────────────────────────────────────
📥  MODULO 10 – “Importa estratto PDF” 100 % OFF-LINE
     • parser universale (regex scorrevole)
     • AI Naive Bayes locale + regole keyword
     • anteprima modificabile
     • opzionale “sovrascrivi movimenti esistenti”
────────────────────────────────────────────────────────
Prerequisiti: completati i Moduli 0-8 (app locale).  
Questo modulo sostituisce l’old “Import CSV/PDF” (Mod. 7).

────────────────────────────────────────────────────────
1️⃣  Nuove dipendenze
────────────────────────────────────────────────────────
pdf_text                      # estrazione testo
isar                          # cache + training-set
flutter_chips_input           # picker categorie
dart_numerics                 # cosineSimilarity (NB confidence)

────────────────────────────────────────────────────────
2️⃣  Isar schema
────────────────────────────────────────────────────────
collection TrainSample { id int auto, desc string, categoryId string }
collection CategoryStat { categoryId string PK,
                          total int,
                          wordCounts Map<String,int> }

────────────────────────────────────────────────────────
3️⃣  Servizi
────────────────────────────────────────────────────────
PdfParserService
  • Usa pdf_text (o Tesseract fallback se bitmap) → List<String> lines.
  • Regex universali:
      dateRe  = r'\d{2}/\d{2}/\d{2,4}'
      amtRe   = r'[-+]?\d[\d.]*,\d{2}'
  • Per ogni line:
      date  = dateRe.firstMatch
      amount= amtRe.lastMatch
      desc  = line.substring(date.end, amount.start).trim()
      if both matches → ImportedTx(date, desc, amount)

CategoryClassifier
  • ruleMap Regex → catId (seed MCC + keyword)
  • NaiveBayes offline (train da Isar.TrainSample + Laplace smoothing)
  • predict(desc) → catId? + conf (0-1)

────────────────────────────────────────────────────────
4️⃣  Flow UI completo
────────────────────────────────────────────────────────
Home ▸ overflow “Importa estratto…”

➊ **PaymentTypeSheet** (ModalBottomSheet 40 %)
    – SegmentedButton 2 opzioni: “Carta Credito”, “Bancomat”
    – Checkbox “Sovrascrivi movimenti di questa tipologia
      nell’intervallo dell’estratto”
    – Button “Avanti”

➋ **FilePicker** accetta *.pdf

➌ **ProgressDialog**
    – M3 AlertDialog full-width
    – CircularProgressIndicator + “Analisi estratto in corso…”

➍ Dopo parsing & classificazione →
   dismiss dialog → **PreviewScreen**
    • ListView TransactionPreviewCard:
        icona categoria + desc + importo ± + chip conf:
            ✓ verde conf>0.85 | ! giallo 0.7-0.85 | ? rosso <0.7
        tap chip → CategoryPickerSheet (grid icone 4 col)
    • AppBar:
        – Seleziona-tutto ✓
        – Pulsante “Importa” abilitato se tutte righe green ✓ o corrette

➎ On “Importa” tap:
    if checkboxOverwrite:
        repo.deleteByDateAndPaymentType(startDate, endDate, selectedType)
    for tx in righe:
        if corrected → TrainSample.put(desc, catId)
        classifier.retrainIncremental()
        transactionsProvider.add(tx.toTransaction())
    Navigator.popUntil(Home)
    BalanceCard.animateScale()
    Snackbar “Import OK – ${n} movimenti, ${k} correzioni salvate”

────────────────────────────────────────────────────────
5️⃣  API provider / repository da creare
────────────────────────────────────────────────────────
TransactionRepository
    void deleteByDateAndPaymentType(DateTime from, DateTime to,
                                    PaymentType type);
    void batchInsert(List<Transaction>);
(train stays in memory for now – no Firestore)

────────────────────────────────────────────────────────
6️⃣  Test
────────────────────────────────────────────────────────
Unit
  • PdfParserService parses 3 bank layouts (fixtures) → 100 % righe.
  • CategoryClassifier.confidence returns >0.85 for seed rules.
Widget
  • PreviewScreen mostra chip rosse per conf<0.7
  • Check “sovrascrivi” elimina solo movimenti Bancomat nel range.

────────────────────────────────────────────────────────
👉  Genera i patch diff e **attendi la mia conferma** prima di applicare.
